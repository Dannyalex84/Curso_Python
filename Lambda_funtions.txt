La clase y la explicación del profesor están excelentes para entender este concepto, pero en la vida real es una mala practica usar las funciones lambda de esa manera.

Deberías tener en cuenta que:
.

Las funciones lambda no deberían sustituir a las funciones def en python, usar las funciones lambda para sustituir una funcion def es una mala practica.
.
lambda != arrow_func.
Si vienes de Javascript es probable que quieras usar una funcion lambda como si fuera una arrow function, no hagas eso. Una arrow function puede llegar a ser mucho mas completa y estas si pueden sustituir a una función clásica en Javascript.
.
Las Funciones lambda solo deberían de usarse en caso muy específicos o para competencias de programación en las que tengas que programar lo mas rápido posible.
.
Por favor lean esto: https://stackoverflow.com/questions/25010167/e731-do-not-assign-a-lambda-expression-use-a-def
.
En serio es muy importante que lean y entiendan el link del punto anterior si quieren convertirse en unos crack en python!
Suerte y nunca paren de aprender!


Conceptos avanzados de funciones
Una función es simplemente código que escribimos una vez y aplicamos después en diferentes lugares donde estemos trabajando.

funciones anónimas: Lambda
Lambda son las funciones anónimas que contienen una sola expresión, es decir: funciones sin identificación, sin nombre:

lambda argumento:expresión
tenemos la palabra clave lambda
un argumento seguido de una expresión donde se colocan los argumentos
En vez de usar def usamos lambda. Estas últimas pueden tener el argumento que nosotros necesitemos, pero una sola línea de expresión.

palindrome = lambda string: string === string[::-1]
print(palindrome("ana"))
#output
True
lambda
argumento o parametro que recibe la función para poder acompañado de la palabra clave lambda
expresión con linea de código
variable con identificador, ojo no es de la función, sino de la variable que va a contener un objeto de tipo función que retorna toda la función de python
lamda2
retorna un objeto tipo función. además de ser anónima, para llamarlo, pero el nombre que va a tener esta función con el que se le va a llamar después es la variable de tipo función.
con funciones normales se vería:
def palindrome(string):
    return string == strig[::-1]
print(palindrome("ana"))
#output
True
pongo el código otra vez para comparar

palindrome = lambda string: string === string[::-1]
print(palindrome("ana"))
#output
True
lamda	def
parametro sin paréntesis	parametro con parentesis
usar lambda	usar def
sin parentesis	entre parentesis
identificador como nombre de la variable	identificador como nombre de la funcion
sin return	palabra return